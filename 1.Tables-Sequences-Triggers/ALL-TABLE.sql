---CREATE TABLE XXBCM_SUPPLIERS 
CREATE TABLE XXBCM_SUPPLIERS 
   (	
    SUPPLIER_ID INTEGER constraint XXBCM_SUPPLIERS_pk PRIMARY key , 
	SUPPLIER_NAME VARCHAR2(100), 
	SUPP_CONTACT_NAME VARCHAR2(50), 
	SUPP_ADDRESS VARCHAR2(200), 
	SUPP_CONTACT_1 varchar(20),
	SUPP_CONTACT_2 varchar(20),
	SUPP_EMAIL VARCHAR2(200) constraint unique_email unique 
   )  ;
   
   
----CREATE SEQUENCE SEQ_SUPPLIERS
   CREATE SEQUENCE SEQ_SUPPLIERS
		START WITH 1
		INCREMENT BY 1
		NOCACHE
		NOCYCLE;	
----TRIGGER auto-increment id in XXBCM_SUPPLIERS
CREATE OR REPLACE TRIGGER 	increment_suppliers_id_trigger
BEFORE INSERT ON XXBCM_SUPPLIERS
FOR EACH ROW
BEGIN
    :NEW.SUPPLIER_id := SEQ_SUPPLIERS.NEXTVAL;
END;
   
   
-- ----Check is email 
-- CREATE OR REPLACE FUNCTION isemail(email IN VARCHAR2) RETURN BOOLEAN IS
-- BEGIN
--     RETURN REGEXP_LIKE(email,
--         '^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$',
--         'IX');
-- EXCEPTION
--     WHEN OTHERS THEN
--         RETURN FALSE;
 -- END;



-- ----Check is email 
-- CREATE OR REPLACE TRIGGER check_SUPPLIERS_email_trigger
-- BEFORE INSERT OR UPDATE ON XXBCM_SUPPLIERS
-- FOR EACH ROW
-- BEGIN
--     IF NOT isemail(:NEW.SUPP_EMAIL) THEN
--         :NEW.SUPP_EMAIL:=null;
--    --     RAISE_APPLICATION_ERROR(-20001, 'Invalid email address.');
--     END IF;
-- END;






CREATE TABLE XXBCM_ORDERS 
   (	ORDER_ID NUMBER constraint XXBCM_ORDERS_pk PRIMARY KEY, 
	ORDER_REF VARCHAR2(50), 
	ORDER_DESCRIPTION VARCHAR2(2000), 
	ORDER_STATUS VARCHAR2(6), 
	ORDER_TOTAL_AMOUNT NUMBER(10,2), 
	SUPPLIER_ID NUMBER, 
	ORDER_Date date,
	 CHECK (order_status IN ('Open', 'Closed')) ENABLE,
	 CONSTRAINT FK_SUPPLIER FOREIGN KEY (SUPPLIER_ID)
	  REFERENCES XXBCM_SUPPLIERS (SUPPLIER_ID) ENABLE
   );
   
 CREATE TABLE XXBCM_ORDER_LINE 
   (	ORDER_LINE_ID NUMBER constraint XXBCM_ORDER_LINE_pk PRIMARY KEY , 
	ORDER_ID NUMBER, 
	ORDER_DESCRIPTION VARCHAR2(2000), 
	ORDER_STATUS VARCHAR2(9), 
	ORDER_LINE_AMOUNT NUMBER(10,2), 
	 CHECK (order_status IN ('Cancelled', 'Received')) ENABLE, 
 	 CONSTRAINT FK_ORDER FOREIGN KEY (ORDER_ID)
	  REFERENCES XXBCM_ORDERS (ORDER_ID) ENABLE
   )  ;
 
CREATE SEQUENCE SEQ_orders
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;

CREATE OR REPLACE TRIGGER increment_orders_id_trigger
BEFORE INSERT ON XXBCM_orders
FOR EACH ROW
BEGIN
    :NEW.order_id := SEQ_orders.NEXTVAL;
	END;
	

	
CREATE SEQUENCE SEQ_orders_line
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;

CREATE OR REPLACE TRIGGER orders_line_id_trigger
BEFORE INSERT ON XXBCM_ORDER_LINE
FOR EACH ROW
BEGIN
    :NEW.order_line_id := SEQ_orders_line.NEXTVAL;
	END;

	
	CREATE TABLE XXBCM_INVOICES 
   (	INVOICE_ID NUMBER  CONSTRAINT XXBCM_INVOICES_PK PRIMARY KEY, 
	INVOICE_REFERENCE VARCHAR2(50), 
	INVOICE_DATE DATE, 
	INVOICE_STATUS VARCHAR2(50), 
	INVOICE_HOLD_REASON VARCHAR2(2000), 
	INVOICE_AMOUNT NUMBER(10,2), 
	INVOICE_DESCRIPTION VARCHAR2(2000), 
	ORDER_line_ID NUMBER, 
	 CHECK (INVOICE_STATUS IN ('Paid', 'Pending')) ENABLE, 
	 CONSTRAINT XXBCM_INVOICES_ORDER_FK FOREIGN KEY (ORDER_line_ID)
	  REFERENCES XXBCM_ORDER_line (ORDER_line_ID) ENABLE
   ) ;

CREATE SEQUENCE SEQ_invoices
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;

CREATE OR REPLACE TRIGGER invoices_line_id_trigger
BEFORE INSERT ON XXBCM_INVOICES
FOR EACH ROW
BEGIN
    :NEW.INVOICE_id := SEQ_invoices.NEXTVAL;
END;